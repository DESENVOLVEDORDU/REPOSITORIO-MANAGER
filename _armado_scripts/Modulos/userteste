#!/bin/bash
USERS_DATABASE="/root/usuarios.db"
linha="\033[0m\e[34m========================================"  
[[ ! -e /usr/lib/ADMNETFREE ]] && rm -rf /bin/criaruser > /dev/null 2>&1  
__IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
newclient () {
#Nome #Senha
usermod -p $(openssl passwd -1 $2) $1
  while [[ ${newfile} != @(s|S|y|Y|n|N) ]]; do
  echo -ne "\033[01;36mCRIAR ARQUIVO OpenVpn?\033[01;32m [s/n]\033[01;37m:"; read newfile
  done
if [[ ${newfile} = @(s|S) ]]; then
	cd /etc/openvpn/easy-rsa/
	./easyrsa build-client-full $1 nopass > /dev/null 2>&1
  cp /etc/openvpn/client-common.txt ~/$1.ovpn
	echo "<ca>" >> ~/$1.ovpn
	cat /etc/openvpn/easy-rsa/pki/ca.crt >> ~/$1.ovpn
	echo "</ca>" >> ~/$1.ovpn
	echo "<cert>" >> ~/$1.ovpn
	cat /etc/openvpn/easy-rsa/pki/issued/$1.crt >> ~/$1.ovpn
	echo "</cert>" >> ~/$1.ovpn
	echo "<key>" >> ~/$1.ovpn
	cat /etc/openvpn/easy-rsa/pki/private/$1.key >> ~/$1.ovpn
	echo "</key>" >> ~/$1.ovpn
	echo "<tls-auth>" >> ~/$1.ovpn
	cat /etc/openvpn/ta.key >> ~/$1.ovpn
	echo "</tls-auth>" >> ~/$1.ovpn
  while [[ ${ovpnauth} != @(s|S|y|Y|n|N) ]]; do
  	echo -ne "\033[01;36mARQUIVO COM SENHA?\033[01;32m [s/n]\033[01;37m:"; read ovpnauth
    
  done
  [[ ${ovpnauth} = @(n|N) ]] && sed -i "s;auth-user-pass;<auth-user-pass>\n$1\n$2\n</auth-user-pass>;g" $HOME/$1.ovpn
  cd $HOME
  zip ./$1.zip ./$1.ovpn > /dev/null 2>&1
  echo ""
  echo -e "\033[1;32mArquivo Criado em\033[01;37m: ($HOME/$1.zip)"
  echo ""
  sleep 3
 fi
}
mkdir /home/DATABASE/files/userteste 1>/dev/null 2>/dev/null
tmpusr () {
time="$1"
timer=$(( $time * 60 ))
timer2="'$timer's"
echo "#!/bin/bash
sleep $timer2
kill"' $(ps -u '"$2 |awk '{print"' $1'"}') 1> /dev/null 2> /dev/null
userdel -f $2
rm -rf /tmp/$2
rm -rf /home/DATABASE/files/userteste/$USER
cat $USERS_DATABASE | grep -wv "$USER" > remove.txt
mv remove.txt $USERS_DATABASE
exit" > /tmp/$2
}
clear
echo -e "$linha"
echo -e "\033[01;37m             Testes Ativos:"
echo -e "$linha"
[ "$(ls -A /home/DATABASE/files/userteste)" ]  || echo -e "\033[1;31mNenhum test ativo!\033[0m"
for testeson in $(ls /home/DATABASE/files/userteste |sort |sed 's/.sh//g')
do
echo -e "\033[01;37m$testeson"
done
echo -e "$linha"
echo -e "\033[01;37m      LISTA DE USUÁRIOS CRIADOS "
echo -e "$linha"
NUMBER=$(awk  -F : '$3 >= 500 {print  $1}'  /etc/passwd | grep -v "nobody" | sort | wc -l)
if [ $NUMBER = "0" ]; then
  echo -e "\033[01;37mNenhum usuário criado no momento!"
else
  for USERS in `awk  -F : '$3 >= 500 {print  $1}'  /etc/passwd | grep -v "nobody" | sort`; do
    echo -ne "\033[01;33m"; echo $USERS
  done
fi
echo ""
echo -e "\033[01;32m 0:\033[01;36m RETORNAR AO MENU."
echo -e "$linha"
echo -ne "\033[01;36mNOME DO USUÁRIO:\033[01;37m"; read USER
if [ -z $USER ]; then
  echo ""
	echo -e "\033[1;31mErro! \033[1;37mVocê digitou um nome de usuário vazio. Tente novamente!\033[0m"
  sleep 2s
  userteste
  exit
else
if [ "$USER" = "root" ]; then
  echo ""
  echo -e "\033[1;31mErro! \033[1;37mUsuário inválido. Tente novamente!\033[0m"
  sleep 2s
  userteste
  exit
else
if [ "$USER" = "0" ]; then
  h
  exit
else
if [ "$USER" = "R" ]; then
  userteste
  exit
else
if echo $USER | grep -q '[^a-z A-Z 0-9 ._-]'; then
  echo ""
  echo -e "\033[1;31mErro! \033[1;37mVocê digitou um nome de usuário invaldoo. Use apenas letras, números\033[0m"; echo -e "\033[01;37;41mpontos e traços. Não use espaços, acentos ou caracteres especiais. T\033[0m"; echo -e "\033[01;37;41mente novamente!                                                     \033[0m"
  sleep 2s
  userteste
  exit
else
  awk  -F : '$3 >= 500 {print  $1}'  /etc/passwd | grep -v "nobody" | sort > /tmp/users.txt
if grep -xq "$USER" /tmp/users.txt; then
  echo ""
  echo -e "\033[1;31mErro! \033[1;37mVocê digitou um nome de usuário já existente. Digite um nome de\033[0m"; echo -e "\033[01;37;41musuário que não seja existente na lista acima. Tente novamente!\033[0m"
  sleep 2s
  userteste
  exit
else
CHARACTERSMIN=$(echo ${#USER})
if [ $CHARACTERSMIN -lt 4 ]; then
  echo "" 
  echo -e "\033[1;31mErro! \033[1;37mVocê digitou um nome de usuário muito curto, use no mínimo 4 caracteres!\033[0m"
  echo " "
  sleep 2s
  userteste
  exit
else
  CHARACTERS=$(echo $USER | wc -c)
if [ $CHARACTERS -gt 33 ]; then
  echo ""
  echo -e "\033[1;31mErro! \033[1;37mVocê digitou um nome de usuário muito grande. Use no máximo 3\033[0m"; echo -e "\033[01;37;41m2 caracteres para o usuário. Tente novamente!                \033[0m"
  sleep 2s
  userteste
  exit
else
					echo -ne "\033[01;36mSENHA:\033[01;37m"; read PASSWORD
if [ -z $PASSWORD ]; then
  echo ""
  echo -e "\033[1;31mErro! \033[1;37mVocê digitou uma senha vazia. Tente novamente!\033[0m"
  sleep 2s
  userteste
  exit
else
if [ "$PASSWORD" = "0" ]; then
  h
  exit
else
if [ "$PASSWORD" = "R" ]; then
  userteste
  exit
else

 echo -ne "\033[01;36mDURAÇÃO EM MINUTOS:\033[01;37m"; read tmp

if echo $tmp | grep -q '[^0-9R]'; then
  echo ""
  echo -e "\033[1;31mErro! \033[1;37mVocê digitou um número inválido. Tente novamente!\033[0m"
  sleep 2s
  userteste
  exit
else
if [ -z $tmp ]; then
  echo ""
  echo -e "\033[1;31mErro! \033[1;37mVocê digitou um número vazio. Tente novamente!\033[0m"
  sleep 2s
  userteste
  exit
else
if [ "$tmp" = "0" ]; then
  h
  exit
else
if [ "$DAYS" = "R" ]; then
  userteste
  exit
else
	echo -ne "\033[01;36mN° DE CONEXÕES PERMITIDAS:\033[01;37m"; read CONNECTIONS
if echo $CONNECTIONS | grep -q '[^0-9R]'; then
  echo ""
  echo -e "\033[1;31mErro! \033[1;37mVocê digitou um número inválido. Tente novamente!\033[0m"
  sleep 2s
  userteste
  exit
else
if [ -z $CONNECTIONS ]; then
  echo ""
  echo -e "\033[1;31mErro! \033[1;37mVocê digitou um número vazio. Tente novamente!\033[0m"
  sleep 2s
  userteste
  exit
else
if [ "$CONNECTIONS" = "0" ]; then
  h
  exit
else
if [ "$CONNECTIONS" = "R" ]; then
  userteste
  exit
else
  VALIDITY1=$(date "+%Y-%m-%d" -d "+ $DAYS days")
  tempo=$(echo "$tempoin" |sed 's/ //g')
  useradd -e $VALIDITY1 -M -s /bin/false $USER
	(echo $PASSWORD; echo $PASSWORD) | passwd $USER 1> /dev/null 2> /dev/null
  echo "$PASSWORD" > /etc/SSHPlus/senha/$USER
  echo "$USER $CONNECTIONS" >> $USERS_DATABASE
  touch /tmp/$USER
  tmpusr $tmp $USER
  chmod 777 /tmp/$USER
  touch /tmp/cmd
  chmod 777 /tmp/cmd
  echo "nohup /tmp/$USER & >/dev/null" > /tmp/cmd
  /tmp/cmd 2>/dev/null 1>/dev/null
  rm -rf /tmp/cmd
	touch /home/DATABASE/files/userteste/$USER
	[[ $(dpkg --get-selections|grep -w "openvpn"|head -1) ]] && [[ -e /etc/openvpn/openvpn-status.log ]] && newclient "$USER" "$PASSWORD"
	clear
	echo -e "$linha"
	echo -e "\033[01;37m      USÚARIO CRIADO COM SUCESSO!"
	echo -e "$linha"
	echo -e "\033[1;36mNOME: \033[1;37m$USER\033[0m"
	echo -e "\033[1;36mSENHA: \033[1;37m$PASSWORD\033[0m"
	echo -e "\033[1;36mVALIDADE: \033[1;37m$tmp min\033[0m"
	echo -e "\033[1;36mLIMITE DE CONEXÃO: \033[1;37m$CONNECTIONS\033[0m"
	echo -e "$linha"
	echo -e "\033[1;31mAPOS O TEMPO EXPIRAR O USUARIO"
  echo -e "\033[1;31mSERA DELETADO E DESCONECTADO."
  echo -e "$linha"
	bash /home/DATABASE/files/userteste/$USER &
  echo ""
  read -p "$(echo -e "\033[01;37mDeseja criar mais um usuário?\033[01;32m [s/n]:\033[01;37m")" -e -i n resp
	if [ "$resp" == "s" ]; then
	userteste
	elif [ "$resp" == "n" ]; then
	h
  echo ""
  exit
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
