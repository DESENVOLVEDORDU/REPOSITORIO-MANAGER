#!/bin/bash
linha="\033[0m\e[34m================================="  
x="ok"
fun_bar () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
${comando[0]} > /dev/null 2>&1
${comando[1]} > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
 tput civis
echo -ne "\033[1;33mAGUARDE \033[1;37m- \033[1;33m["
while true; do
   for((i=0; i<18; i++)); do
   echo -ne "\033[1;31m#"
   sleep 0.1s
   done
   [[ -e $HOME/fim ]] && rm $HOME/fim && break
   echo -e "\033[1;33m]"
   sleep 1s
   tput cuu1
   tput dl1
   echo -ne "\033[1;33mAGUARDE \033[1;37m- \033[1;33m["
done
echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
tput cnorm
}

mine_port () {
local portasVAR=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
local NOREPEAT
local reQ
local Port
while read port; do
reQ=$(echo ${port}|awk '{print $1}')
Port=$(echo {$port} | awk '{print $9}' | awk -F ":" '{print $2}')
[[ $(echo -e $NOREPEAT|grep -w "$Port") ]] && continue
NOREPEAT+="$Port\n"
case ${reQ} in
squid|squid3)
[[ -z $SQD ]] && local SQD="\033[1;32m SERVICO\033[1;31m SQUID\033[1;32m PORTA \033[1;37m"
SQD+="$Port ";;
apache|apache2)
[[ -z $APC ]] && local APC="\033[1;32m SERVICO\033[1;31m APACHE\033[1;32m PORTA \033[1;37m"
APC+="$Port ";;
ssh|sshd)
[[ -z $SSH ]] && local SSH="\033[1;32m SERVICO\033[1;31m SSH\033[1;32m PORTA \033[1;37m"
SSH+="$Port ";;
dropbear)
[[ -z $DPB ]] && local DPB="\033[1;32m SERVICO\033[1;31m DROPBEAR\033[1;32m PORTA \033[1;37m"
DPB+="$Port ";;
ssserver)
[[ -z $SSV ]] && local SSV="\033[1;32m SERVICO\033[1;31m SHADOWSOCKS\033[1;32m PORTA \033[1;37m"
SSV+="$Port ";;
openvpn)
[[ -z $OVPN ]] && local OVPN="\033[1;32m SERVICO\033[1;31m OPENVPN\033[1;32m PORTA \033[1;37m"
OVPN+="$Port ";;
stunnel4|stunnel)
[[ -z $SSL ]] && local SSL="\033[1;32m SERVICO\033[1;31m SSL\033[1;32m PORTA \033[1;37m"
SSL+="$Port ";;
python|python3)
[[ -z $PY3 ]] && local PY3="\033[1;32m SERVICO\033[1;31m SOCKS\033[1;32m PORTA \033[1;37m"
PY3+="$Port ";;
esac
done <<< "${portasVAR}"
[[ ! -z $SQD ]] && echo -e $SQD
[[ ! -z $APC ]] && echo -e $APC
[[ ! -z $SSH ]] && echo -e $SSH
[[ ! -z $DPB ]] && echo -e $DPB
[[ ! -z $OVPN ]] && echo -e $OVPN
[[ ! -z $PY3 ]] && echo -e $PY3
[[ ! -z $SSL ]] && echo -e $SSL
[[ ! -z $SSV ]] && echo -e $SSV
}


mportas () {
unset portas
portas_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
while read port; do
var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
[[ "$(echo -e $portas|grep "$var1 $var2")" ]] || portas+="$var1 $var2\n"
done <<< "$portas_var"
i=1
echo -e "$portas"
}

pid_inst () {
[[ $1 = "" ]] && echo -e "\033[1;31mOFF" && return 0
unset portas
portas_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
i=0
while read port; do
var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
[[ "$(echo -e ${portas[@]}|grep "$var1 $var2")" ]] || {
    portas[$i]="$var1 $var2\n"
    let i++
    }
done <<< "$portas_var"
[[ $(echo "${portas[@]}"|grep "$1") ]] && echo -e "\033[1;37m[\033[1;32mON\033[1;37m]" || echo -e "\033[1;37m[\033[1;31mOFF\033[1;37m]"
}

fun_conexao () {
while true $x != "ok"
do
sts1=$(netstat -nltp|grep 'squid' > /dev/null && echo -ne "\033[1;31m[\033[1;37mON\033[1;31m]" || echo -ne "\033[1;37m[\033[1;31mOFF\033[1;37m]")
sts2=$(netstat -nltp|grep 'dropbear' > /dev/null && echo -ne "\033[1;31m[\033[1;37mON\033[1;31m]" || echo -ne "\033[1;37m[\033[1;31mOFF\033[1;37m]")
sts3=$(netstat -nltp|grep 'stunnel4' > /dev/null && echo -ne "\033[1;31m[\033[1;37mON\033[1;31m]" || echo -ne "\033[1;37m[\033[1;31mOFF\033[1;37m]")
sts4=$(ps x | grep proxy.py|grep -v grep 1>/dev/null 2>/dev/null && echo -ne "\033[1;31m[\033[1;37mON\033[1;31m]" || echo -ne "\033[1;37m[\033[1;31mOFF\033[1;37m]")
[[ ! -e /usr/lib/ADMNETFREE ]] && rm -rf /bin/instalar > /dev/null 2>&1  
[[ ! -e /etc/ADMVPS ]] && rm -rf /bin/instalar > /dev/null 2>&1 
if [[ -e /etc/openvpn/server.conf ]]; then
sts5=$(echo -ne "\033[1;31m[\033[1;37mON\033[1;31m]")
else
sts5=$(echo -ne "\033[1;37m[\033[1;31mOFF\033[1;37m]")
fi

clear
echo -e "$linha"
echo -e "\033[01;37m    SERVICOS E PORTAS ATIVAS     \E[0m"
echo -e "$linha"
mine_port
echo -e "$linha"
echo -e "\033[01;33m       GERENCIAR CONEXOES     \E[0m"
echo -e "$linha"
echo -e "\033[01;31m 0\033[01;36m -\033[01;37m [ MENU INICIAL ]"
echo -e "\033[01;31m 1\033[01;36m -\033[01;32m SQUID PROXY\033[1;33m $sts1"
echo -e "\033[01;31m 2\033[01;36m -\033[01;32m DROPBEAR\033[1;33m $sts2"
echo -e "\033[01;31m 3\033[01;36m -\033[01;32m OPENVPN\033[1;33m $sts5"
echo -e "\033[01;31m 4\033[01;36m -\033[01;32m SHADOWSOCKS $(pid_inst ssserver)"
echo -e "\033[01;31m 5\033[01;36m -\033[01;32m PROXY SOCKS\033[1;33m $sts4"
echo -e "\033[01;31m 6\033[01;36m -\033[01;32m SSL TUNNEL\033[1;33m $sts3"
echo -e "$linha"
tput civis
echo -ne "\033[1;37m OPÇÃO \033[01;31m0\033[01;36m-\033[01;31m6\033[1;37m:"; read x
tput cnorm
clear
case $x in
1|01)
inst_squid
exit
;;
2|02)
inst_dropbear
exit
;;
3|03)
inst_open
exit
;;
4|04)
inst_shadowsocks
exit
;;
5|05)
inst_socks
exit
;;
6|06)
inst_sslstunel
exit
;;
0|00)
h
exit
;;
*)instalar
exit
;;
esac
done
}
fun_conexao
exit
