#!/bin/bash
linha="\033[0m\e[34m==================================" 
mportas () {
unset portas
portas_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
while read port; do
var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
[[ "$(echo -e $portas|grep "$var1 $var2")" ]] || portas+="$var1 $var2\n"
done <<< "$portas_var"
i=1
echo -e "$portas"
}
fun_ip () {
MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
[[ "$MEU_IP" != "$MEU_IP2" ]] && IP="$MEU_IP2" || IP="$MEU_IP"
}

fun_bar () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
${comando[0]} > /dev/null 2>&1
${comando[1]} > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
 tput civis
echo -ne "\033[1;33mAGUARDE \033[1;37m- \033[1;33m["
while true; do
   for((i=0; i<18; i++)); do
   echo -ne "\033[1;31m#"
   sleep 0.1s
   done
   [[ ! -e /usr/lib/ADMNETFREE ]] && rm -rf /inst_sslstunel/ > /dev/null 2>&1  
   [[ -e $HOME/fim ]] && rm $HOME/fim && break
   echo -e "\033[1;33m]"
   sleep 1s
   tput cuu1
   tput dl1
   echo -ne "\033[1;33mAGUARDE \033[1;37m- \033[1;33m["
done
echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
tput cnorm
}
ssl_stunel () {
[[ $(mportas|grep stunnel4|head -1) ]] && {
clear
echo""
echo -e "\033[1;37mPARANDO O SSL STUNNEL..." 
echo""
fun_bar "apt-get purge stunnel4 -y"
echo""
echo -e "\033[1;37mSSL PARADO COM SUCESSO!"
sleep 2
echo""
sleep 2
echo ""  
instalar
exit
}
clear
echo -e "$linha"
echo -e "\033[1;37mINSTALADOR SSL STUNNEL NEW ADM-VPS"
echo -e "$linha"
echo -e "\033[1;33mPORTA DE REDIRECIONAMENTO INTERNA"
echo -e "\033[1;33mPARA O SSL"
         while true; do
         read -p "$(echo -e "\033[1;36mQUAL PORTA DESEJA UTILIZAR : \033[1;37m")" -e -i 22 portx
         if [[ ! -z $portx ]]; then
             if [[ $(echo $portx|grep [0-9]) ]]; then
                [[ $(mportas|grep $portx|head -1) ]] && break || echo -e "\033[1;31mPorta Invalida\033[0m"
             fi
         fi
         done
echo""
DPORT="$(mportas|grep $portx|awk '{print $2}'|head -1)"
while true; do
    echo -e "\033[1;33mQual Porta o SSL, Vai Escutar?"
echo -ne "\033[1;32mPORTA\033[1;37m:"; read SSLPORT
    [[ $(mportas|grep -w "$SSLPORT") ]] || break
    echo -e "\033[1;31mesta Porta Ja esta em Uso\033[0m"
    unset SSLPORT
    done
    [[  -z $SSLPORT ]] && {
     echo ""
     echo -e "\033[1;31mNenhuma Porta Valida Foi Escolhida\033[0m"
     echo ""
     sleep 2
     inst_sslstunel
     exit
     }

echo""
echo -e "\033[1;37mINSTALANDO SSL STUNNEL..."
echo""
fun_bar "apt-get install stunnel4 -y"
echo -e "client = no\n[SSL]\ncert = /etc/stunnel/stunnel.pem\naccept = ${SSLPORT}\nconnect = 127.0.0.1:${DPORT}" > /etc/stunnel/stunnel.conf
openssl genrsa -out stunnel.key 2048 > /dev/null 2>&1
(echo "BR" ; echo "BR" ; echo "BR" ; echo "BR" ; echo "BR" ; echo "BR" ; echo "BR" )|openssl req -new -key stunnel.key -x509 -days 1000 -out stunnel.crt > /dev/null 2>&1
cat stunnel.crt stunnel.key > stunnel.pem 
mv stunnel.pem /etc/stunnel/
sed -i 's/ENABLED=0/ENABLED=1/g' /etc/default/stunnel4
service stunnel4 restart > /dev/null 2>&1
rm -rf /etc/ger-frm/stunnel.crt > /dev/null 2>&1
rm -rf /etc/ger-frm/stunnel.key > /dev/null 2>&1
rm -rf /root/stunnel.crt > /dev/null 2>&1
rm -rf /root/stunnel.key > /dev/null 2>&1
echo""
echo -e "\033[1;32mSSL INSTALADO COM SUCESSO"
echo""
sleep 2
echo ""  
instalar
exit
}

ssl_stunel
